generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model Game {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now()) @map("created_at")
  gameBanner   String   @map("game_banner")
  gameName     String   @unique @map("game_name")
  gameStudioId String   @map("game_studio_id")
  publisherId  String
  updatedAt    DateTime @default(now()) @map("updated_at")

  gameStudio GameStudio @relation(fields: [gameStudioId], references: [id], onDelete: Cascade)
  publisher  Publisher  @relation(fields: [publisherId], references: [id], onDelete: Cascade)

  categories    GameCategory[]
  platforms     Platform[]
  gameLaunchers GameLauncher[]
  userGames     UserGame[]

  @@map("games")
}

model GameCategory {
  id           Int    @id @default(autoincrement())
  categoryName String @unique @map("category_name")
  games        Game[]

  @@map("game_categories")
}

model GameLauncher {
  id          String   @default(uuid())
  dateRelease DateTime
  gameId      String   @map("game_id")
  platformId  String   @map("plataform_id")
  platforms   Platform @relation(fields: [platformId], references: [id], onDelete: Cascade)
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@id([platformId, gameId])
  @@map("game_launchers")
}

model GameStudio {
  id         String @id @default(uuid())
  studioName String @unique @map("studio_name")
  games      Game[]

  @@map("game_studios")
}

model Platform {
  id            String         @id @default(uuid())
  platformName  String         @unique @map("plataform_name")
  gameLaunchers GameLauncher[]
  games         Game[]

  @@map("platforms")
}

model Publisher {
  id            String @id @default(uuid())
  publisherName String @unique @map("publisher_name")
  games         Game[]

  @@map("publishers")
}

model User {
  id             String     @id @default(uuid())
  email          String     @unique
  userName       String?    @map("user_name")
  password       String
  profilePicture String?    @map("profile_picture")
  userBanner     String?    @map("user_banner")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @default(now()) @map("updated_at")
  userGames      UserGame[]

  @@map("users")
}

model UserGame {
  id                String          @default(uuid())
  gameId            String          @map("game_id")
  userId            String          @map("user_id")
  userGamesStatusId Int
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  UserGamesStatus   UserGamesStatus @relation(fields: [userGamesStatusId], references: [id])
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  game              Game            @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@id([gameId, userId])
  @@map("user_games")
}

model UserGamesStatus {
  id        Int        @id @default(autoincrement())
  status    String
  userGames UserGame[]

  @@map("users_games_status")
}
