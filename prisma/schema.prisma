generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  isValid   Boolean  @default(true)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_token")
}

model Game {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now()) @map("created_at")
  gameBanner   String   @map("game_banner")
  gameName     String   @unique @map("game_name")
  summary      String
  isDlc        Boolean  @default(false) @map("is_dlc")
  parentGameId String?  @map("parent_game_id")
  updatedAt    DateTime @default(now()) @map("updated_at")

  parentGame Game?  @relation("GameToDLC", fields: [parentGameId], references: [id], onDelete: SetNull)
  dlcs       Game[] @relation("GameToDLC")

  gameStudios   GameStudio[]
  publishers    Publisher[]
  categories    GameCategory[]
  platforms     Platform[]
  gameLaunchers GameLauncher[]
  userGames     UserGame[]

  UserGameStats UserGameStats[]
  Rating        Rating[]

  @@map("games")
}

model GameCategory {
  id           Int    @id @default(autoincrement())
  categoryName String @unique @map("category_name")
  games        Game[]

  @@map("game_categories")
}

model GameLauncher {
  id          String   @default(uuid())
  dateRelease DateTime
  gameId      String   @map("game_id")
  platformId  String   @map("plataform_id")
  platforms   Platform @relation(fields: [platformId], references: [id], onDelete: Cascade)
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@id([platformId, gameId])
  @@map("game_launchers")
}

model GameStudio {
  id         String @id @default(uuid())
  studioName String @unique @map("studio_name")
  games      Game[]

  @@map("game_studios")
}

model Platform {
  id            String         @id @default(uuid())
  platformName  String         @unique @map("plataform_name")
  gameLaunchers GameLauncher[]
  games         Game[]

  @@map("platforms")
}

model Publisher {
  id            String @id @default(uuid())
  publisherName String @unique @map("publisher_name")
  games         Game[]

  @@map("publishers")
}

model Rating {
  id        String   @id @default(uuid()) @map("rating_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId    String   @map("game_id")
  value     Float    @map("value")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([userId, gameId])
  @@map("ratings")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  userName       String?         @map("user_name")
  password       String
  profilePicture String?         @map("profile_picture")
  userBanner     String?         @map("user_banner")
  googleId       String?         @unique
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @default(now()) @map("updated_at")
  userGames      UserGame[]
  refreshToken   RefreshToken[]
  UserGameStats  UserGameStats[]
  Rating         Rating[]

  @@map("users")
}

model UserGame {
  id        String            @id @default(uuid())
  gameId    String?           @map("game_id")
  userId    String            @map("user_id")
  dlcId     String?           @map("dlc_id")
  statuses  UserGamesStatus[]
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  game      Game?             @relation(fields: [gameId], references: [id], onDelete: Cascade)

  UserGameStats UserGameStats?

  @@unique([userId, gameId])
  @@unique([userId, dlcId])
  @@map("user_games")
}

model UserGamesStatus {
  id        Int        @id @default(autoincrement())
  status    Status
  userGames UserGame[]

  @@map("users_games_status")
}

enum Status {
  PLAYED
  REPLAYING
  PLAYING
  BACKLOG
  WISHLIST
}

model UserGameStats {
  id          String @id @default(uuid())
  userGameId  String @map("user_game_id")
  completions Int    @default(0)

  userGame UserGame @relation(fields: [userGameId], references: [id], onDelete: Cascade)

  Game   Game?   @relation(fields: [gameId], references: [id])
  gameId String?
  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  @@unique([userGameId])
  @@map("user_game_stats")
}
