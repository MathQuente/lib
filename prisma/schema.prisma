generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Game {
  id           String   @id @default(uuid())
  gameName     String   @unique @map("game_name")
  gameStudioId String   @map("game_studio_id")
  publisherId  String   @map("publisher_id")
  gameBanner   String   @map("game_banner")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  gameStudio GameStudio @relation(fields: [gameStudioId], references: [id], onDelete: Cascade)
  Publisher  Publisher  @relation(fields: [publisherId], references: [id], onDelete: Cascade)

  categories GameCategory[]
  platforms  Platform[]

  gameLaunchers GameLaunchers[]
  userGames     UserGames[]

  @@map("games")
}

model GameCategory {
  id           Int    @id @default(autoincrement())
  categoryName String @unique @map("category_name")

  games Game[]

  @@map("game_category")
}

model GameLaunchers {
  id          String   @default(uuid())
  dateRelease DateTime
  gameId      String   @map("game_id")
  platformId  String   @map("plataform_id")

  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  platforms Platform @relation(fields: [platformId], references: [id], onDelete: Cascade)

  @@id([platformId, gameId])
}

model GameStudio {
  id         String @id @default(uuid())
  studioName String @unique @map("studio_name")
  games      Game[]

  @@map("game_studio")
}

model Platform {
  id           String @id @default(uuid())
  platformName String @unique @map("plataform_name")

  gameLaunchers GameLaunchers[]
  games         Game[]

  @@map("platforms")
}

model Publisher {
  id            String @id @default(uuid())
  publisherName String @unique @map("publisher_name")

  games Game[]
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  userName       String?  @map("user_name")
  password       String
  profilePicture String?  @map("profile_picture")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")

  userGames UserGames[]

  @@map("user")
}

model UserGames {
  id                String @default(uuid())
  gameId            String @map("game_id")
  userId            String @map("user_id")
  userGamesStatusId Int

  game            Game            @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  UserGamesStatus UserGamesStatus @relation(fields: [userGamesStatusId], references: [id])

  @@id([gameId, userId])
  @@map("user_games")
}

model UserGamesStatus {
  id     Int    @id @default(autoincrement())
  status String

  userGames UserGames[]

  @@map("user_games_status")
}
