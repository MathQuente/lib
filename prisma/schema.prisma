generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  isValid   Boolean  @default(true)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_token")
}

model DLC {
  id        String @id @default(uuid())
  dlcBanner String @map("dlc_banner")
  dlcName   String @unique @map("dlc_name")
  gameId    String @map("gameId")
  summary   String

  gameStudios   GameStudio[]
  publishers    Publisher[]
  categories    GameCategory[]
  platforms     Platform[]
  gameLaunchers GameLauncher[]
  userGames     UserGame[]

  game          Game            @relation(fields: [gameId], references: [id], onDelete: Cascade)
  UserGameStats UserGameStats[]

  @@map("dlcs")
}

model Game {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now()) @map("created_at")
  gameBanner String   @map("game_banner")
  gameName   String   @unique @map("game_name")
  summary    String
  updatedAt  DateTime @default(now()) @map("updated_at")

  gameStudios   GameStudio[]
  publishers    Publisher[]
  categories    GameCategory[]
  platforms     Platform[]
  gameLaunchers GameLauncher[]
  userGames     UserGame[]
  dlcs          DLC[]
  UserGameStats UserGameStats[]

  @@map("games")
}

model GameCategory {
  id           Int    @id @default(autoincrement())
  categoryName String @unique @map("category_name")
  games        Game[]
  dlcs         DLC[]

  @@map("game_categories")
}

model GameLauncher {
  id          String   @default(uuid())
  dateRelease DateTime
  gameId      String   @map("game_id")
  platformId  String   @map("plataform_id")
  platforms   Platform @relation(fields: [platformId], references: [id], onDelete: Cascade)
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  dlcId       String?  @map("dlc_id")
  dlc         DLC?     @relation(fields: [dlcId], references: [id], onDelete: Cascade)

  @@id([platformId, gameId])
  @@map("game_launchers")
}

model GameStudio {
  id         String @id @default(uuid())
  studioName String @unique @map("studio_name")
  games      Game[]
  dlcs       DLC[]

  @@map("game_studios")
}

model Platform {
  id            String         @id @default(uuid())
  platformName  String         @unique @map("plataform_name")
  gameLaunchers GameLauncher[]
  games         Game[]
  dlcs          DLC[]

  @@map("platforms")
}

model Publisher {
  id            String @id @default(uuid())
  publisherName String @unique @map("publisher_name")
  games         Game[]
  dlcs          DLC[]

  @@map("publishers")
}

model User {
  id             String          @id @default(uuid())
  email          String          @unique
  userName       String?         @map("user_name")
  password       String
  profilePicture String?         @map("profile_picture")
  userBanner     String?         @map("user_banner")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @default(now()) @map("updated_at")
  userGames      UserGame[]
  refreshToken   RefreshToken[]
  UserGameStats  UserGameStats[]

  @@map("users")
}

model UserGame {
  id            String            @id @default(uuid())
  gameId        String?           @map("game_id")
  userId        String            @map("user_id")
  dlcId         String?           @map("dlc_id")
  statuses      UserGamesStatus[] // Relacionamento many-to-many
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  user          User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  game          Game?             @relation(fields: [gameId], references: [id], onDelete: Cascade)
  dlc           DLC?              @relation(fields: [dlcId], references: [id], onDelete: Cascade)
  UserGameStats UserGameStats?

  @@unique([userId, gameId])
  @@unique([userId, dlcId])
  @@map("user_games")
}

model UserGamesStatus {
  id        Int        @id @default(autoincrement())
  status    Status
  userGames UserGame[]

  @@map("users_games_status")
}

enum Status {
  PLAYED
  REPLAYING
  PLAYING
  BACKLOG
  WISHLIST
}

model UserGameStats {
  id          String @id @default(uuid())
  userGameId  String @map("user_game_id") // ← chave estrangeira
  completions Int    @default(0)

  userGame UserGame @relation(fields: [userGameId], references: [id], onDelete: Cascade)
  DLC      DLC?     @relation(fields: [dLCId], references: [id])
  dLCId    String?
  Game     Game?    @relation(fields: [gameId], references: [id])
  gameId   String?
  User     User?    @relation(fields: [userId], references: [id])
  userId   String?

  @@unique([userGameId]) // ← garante 1:1
  @@map("user_game_stats")
}
